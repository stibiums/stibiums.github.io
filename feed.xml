<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://stibiums.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://stibiums.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-15T15:28:21+00:00</updated><id>https://stibiums.github.io/feed.xml</id><title type="html">STIBIUMS_WEB</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">notes of Rustlearning</title><link href="https://stibiums.github.io/blog/2025/07/08/noteofRust/" rel="alternate" type="text/html" title="notes of Rustlearning"/><published>2025-07-08T08:00:00+00:00</published><updated>2025-07-08T08:00:00+00:00</updated><id>https://stibiums.github.io/blog/2025/07/08/noteofRust</id><content type="html" xml:base="https://stibiums.github.io/blog/2025/07/08/noteofRust/"><![CDATA[<p>学习使用的<a href="https://kaisery.github.io/trpl-zh-cn/title-page.html">教程</a></p> <h2 id="hello-world-和-hello-cargo">hello world 和 hello cargo</h2> <h3 id="hello-world">hello world</h3> <p>创建一个以<code class="language-plaintext highlighter-rouge">hello.rs</code>文件，内容如下：</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Hello, world!"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>然后在终端中运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rustc hello.rs
./hello
</code></pre></div></div> <p>便会运行输出<code class="language-plaintext highlighter-rouge">Hello, world!</code>。这是最简单编写运行Rust程序的方式。</p> <h3 id="cargo">cargo</h3> <p>Cargo 是 Rust 的构建系统和包管理器。使用 Cargo 来管理 Rust 项目，它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库。</p> <p>使用cargo创建项目的方法：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo new hello_cargo
<span class="nb">cd </span>hello_cargo
</code></pre></div></div> <p>进入 hello_cargo 目录并列出文件。将会看到 Cargo 生成了两个文件和一个目录：一个 Cargo.toml 文件，一个 src 目录，以及位于 src 目录中的 main.rs 文件。</p> <p>如果要在已有的文件里使用 Cargo，可以在项目目录下运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo init
</code></pre></div></div> <h3 id="编译和运行">编译和运行</h3> <p>在项目目录下运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo build
</code></pre></div></div> <p>这会编译项目并生成可执行文件。可执行文件位于 <code class="language-plaintext highlighter-rouge">target/debug/</code> 目录下。如果需要发布时可以加上参数<code class="language-plaintext highlighter-rouge">--release</code>，这样会进行优化编译：</p> <p>要运行项目，可以使用：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo run
</code></pre></div></div> <p>Cargo 还提供了一个叫 <code class="language-plaintext highlighter-rouge">cargo check</code> 的命令。该命令快速检查代码确保其可以编译，但并不产生可执行文件</p> <h2 id="常见编程概念的迁移">常见编程概念的迁移</h2> <h3 id="变量和可变性">变量和可变性</h3> <h4 id="变量的定义">变量的定义</h4> <p>在 Rust 中，使用<code class="language-plaintext highlighter-rouge">let</code>声明一个变量。变量默认是不可变的。要声明一个可变变量，可以使用 <code class="language-plaintext highlighter-rouge">mut</code> 关键字：</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// 不可变变量</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 可变变量</span>
</code></pre></div></div> <p>如果尝试修改不可变变量，会导致编译错误。Rust的编译器会保证不可变的变量不会发生改变。</p> <h4 id="常量">常量</h4> <p>常量使用 <code class="language-plaintext highlighter-rouge">const</code> 关键字声明，在声明时也必须指明其数据类型，必须在编译时就确定值。常量可以在任何作用域中使用，包括函数内部和外部。</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">THREE_HOURS_IN_SECONDS</span><span class="p">:</span> <span class="nb">u32</span> <span class="o">=</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div></div> <p>常量可以用常量表达式来定义</p> <p>在声明它的作用域之中，常量在整个程序生命周期中都有效</p> <h4 id="遮蔽">遮蔽</h4> <p>遮蔽是指使用同名变量来隐藏之前的变量。可以通过重新声明一个变量来遮蔽之前的变量。</p> <p>第二个变量遮蔽了第一个变量，此时任何使用该变量名的行为中都会视为是在使用第二个变量，直到第二个变量自己也被遮蔽或第二个变量的作用域结束。</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

    <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

    <span class="p">{</span>
        <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"The value of x in the inner scope is: {x}"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nd">println!</span><span class="p">(</span><span class="s">"The value of x is: {x}"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>遮蔽和变量修改是有不同的；遮蔽创建的新的变量，修改原来的变量则是改变原来的变量的值。</p> <h3 id="数据类型">数据类型</h3> <p>Rust 是一种静态类型的语言，在编译时就必须确定所有变量的类型。在定义变量或者常量时，可以使用类型注解来指定变量的类型。</p> <p>有两种数据类型：标量类型和复合类型。</p> <h4 id="标量类型">标量类型</h4> <p>标量类型表示单一的值。Rust 中有四种基本的标量类型：整数、浮点数、布尔值和字符。</p> <h5 id="整型">整型</h5> <p>以下是 Rust 中整型的简洁表格：</p> <table> <thead> <tr> <th><strong>类型</strong></th> <th><strong>长度</strong></th> <th><strong>范围</strong></th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">i8</code></td> <td>8 位</td> <td>-2⁷ 到 2⁷-1</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">u8</code></td> <td>8 位</td> <td>0 到 2⁸-1</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">i16</code></td> <td>16 位</td> <td>-2¹⁵ 到 2¹⁵-1</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">u16</code></td> <td>16 位</td> <td>0 到 2¹⁶-1</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">i32</code></td> <td>32 位</td> <td>-2³¹ 到 2³¹-1</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">u32</code></td> <td>32 位</td> <td>0 到 2³²-1</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">i64</code></td> <td>64 位</td> <td>-2⁶³ 到 2⁶³-1</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">u64</code></td> <td>64 位</td> <td>0 到 2⁶⁴-1</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">isize</code></td> <td>平台相关</td> <td>取决于操作系统（32 位或 64 位）</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">usize</code></td> <td>平台相关</td> <td>取决于操作系统（32 位或 64 位）</td> </tr> </tbody> </table> <hr/> <p><strong>说明</strong>：</p> <ol> <li><strong><code class="language-plaintext highlighter-rouge">i</code> 表示有符号整型</strong>，可以表示正数和负数。</li> <li><strong><code class="language-plaintext highlighter-rouge">u</code> 表示无符号整型</strong>，只能表示非负数。</li> <li><strong><code class="language-plaintext highlighter-rouge">isize</code> 和 <code class="language-plaintext highlighter-rouge">usize</code></strong> 是平台相关的整型类型： <ul> <li>在 32 位系统上，它们分别是 32 位。</li> <li>在 64 位系统上，它们分别是 64 位。</li> </ul> </li> <li><strong>默认类型</strong>：如果没有显式指定类型，Rust 会默认使用 <code class="language-plaintext highlighter-rouge">i32</code> 类型。</li> </ol> <h5 id="浮点型">浮点型</h5> <p>Rust 的浮点数类型是 f32 和 f64，分别占 32 位和 64 位。默认类型是 f64</p> <h5 id="布尔型">布尔型</h5> <p>布尔类型只有两个值：true 和 false。可以使用 <code class="language-plaintext highlighter-rouge">bool</code> 类型来声明</p> <h5 id="字符型">字符型</h5> <p>字符类型使用 <code class="language-plaintext highlighter-rouge">char</code> 类型来表示，表示单个 Unicode 字符。字符类型是四个字节（32 位），可以表示任何有效的 Unicode 字符，带变音符号的字母（Accented letters），中文、日文、韩文等字符，emoji（绘文字）以及零长度的空白字符都是有效的 char 值</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'z'</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">z</span><span class="p">:</span> <span class="nb">char</span> <span class="o">=</span> <span class="sc">'ℤ'</span><span class="p">;</span> <span class="c1">// with explicit type annotation</span>
    <span class="k">let</span> <span class="n">heart_eyed_cat</span> <span class="o">=</span> <span class="sc">'😻'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="复合类型">复合类型</h4> <p>复合类型可以将多个值组合成一个值。Rust 中有两种基本的复合类型：元组和数组。</p> <h5 id="元组">元组</h5> <p>元组是将多个值组合成一个复合类型。元组的元素可以是不同类型的。元组使用小括号 <code class="language-plaintext highlighter-rouge">()</code> 来表示，元素之间用逗号分隔。</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">tup</span><span class="p">:</span> <span class="p">(</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">f64</span><span class="p">,</span> <span class="nb">u8</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mf">6.4</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

    <span class="k">let</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="o">=</span> <span class="n">tup</span><span class="p">;</span> <span class="c1">// 支持解构</span>

    <span class="nd">println!</span><span class="p">(</span><span class="s">"The value of y is: {y}"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>可以使用<code class="language-plaintext highlighter-rouge">.</code> 加上索引来访问元组的元素</p> <h5 id="数组">数组</h5> <p>数组是固定长度的同类型元素的集合。数组使用方括号 <code class="language-plaintext highlighter-rouge">[]</code> 来表示，元素之间用逗号分隔。</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">a</span><span class="p">:</span> <span class="p">[</span><span class="nb">i32</span><span class="p">;</span> <span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span> <span class="c1">//方括号中包含每个元素的类型，后跟分号，再后跟数组元素的数量</span>
    <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">;</span> <span class="mi">5</span><span class="p">];</span> <span class="c1">// 创建一个包含 5 个元素的数组，每个元素的值都是 3</span>
    <span class="k">let</span> <span class="n">first</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// 访问数组的第一个元素</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="函数">函数</h3>]]></content><author><name></name></author><category term="my-notes"/><category term="notes"/><summary type="html"><![CDATA[这是我学习Rust语言的笔记.]]></summary></entry><entry><title type="html">大连</title><link href="https://stibiums.github.io/blog/2025/07/06/dalian/" rel="alternate" type="text/html" title="大连"/><published>2025-07-06T23:00:00+00:00</published><updated>2025-07-06T23:00:00+00:00</updated><id>https://stibiums.github.io/blog/2025/07/06/dalian</id><content type="html" xml:base="https://stibiums.github.io/blog/2025/07/06/dalian/"><![CDATA[<p>一次说走就走但是睡大觉的旅行😂</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/trip_img/dalian1-480.webp 480w,/assets/img/trip_img/dalian1-800.webp 800w,/assets/img/trip_img/dalian1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/trip_img/dalian1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/trip_img/dalian2-480.webp 480w,/assets/img/trip_img/dalian2-800.webp 800w,/assets/img/trip_img/dalian2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/trip_img/dalian2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/trip_img/dalian3-480.webp 480w,/assets/img/trip_img/dalian3-800.webp 800w,/assets/img/trip_img/dalian3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/trip_img/dalian3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/trip_img/dalian4-480.webp 480w,/assets/img/trip_img/dalian4-800.webp 800w,/assets/img/trip_img/dalian4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/trip_img/dalian4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>不要问我都去哪里玩了，旅游舒舒服服的放松才是最重要的😛😛😛</p>]]></content><author><name></name></author><category term="记录"/><category term="旅行"/><category term="照片"/><category term="images"/><summary type="html"><![CDATA[开心就好]]></summary></entry><entry><title type="html">notes of CS231n</title><link href="https://stibiums.github.io/blog/2025/07/01/notesofCS231n/" rel="alternate" type="text/html" title="notes of CS231n"/><published>2025-07-01T00:00:00+00:00</published><updated>2025-07-01T00:00:00+00:00</updated><id>https://stibiums.github.io/blog/2025/07/01/notesofCS231n</id><content type="html" xml:base="https://stibiums.github.io/blog/2025/07/01/notesofCS231n/"><![CDATA[<p>这是我关于CS231n课程的学习笔记。</p> <h3 id="课程笔记目录">课程笔记目录</h3> <ul> <li> <p><a href="/notes/cs231n-ch01/">第一章：Numpy</a></p> <ul> <li>创建 Arrays</li> <li>索引与切片</li> <li>数据类型</li> <li>数学运算</li> <li>广播机制</li> <li>Matplotlib 绘图</li> </ul> </li> <li> <p><a href="/notes/cs231n-ch02/">第二章：图像分类</a></p> <ul> <li>k-近邻分类器</li> <li>线性分类器</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="my-notes"/><category term="notes"/><summary type="html"><![CDATA[这是关于CS231n课程的学习笔记.]]></summary></entry><entry><title type="html">notes of algorithm and data</title><link href="https://stibiums.github.io/blog/2025/07/01/notesofalgorithm_and_data/" rel="alternate" type="text/html" title="notes of algorithm and data"/><published>2025-07-01T00:00:00+00:00</published><updated>2025-07-01T00:00:00+00:00</updated><id>https://stibiums.github.io/blog/2025/07/01/notesofalgorithm_and_data</id><content type="html" xml:base="https://stibiums.github.io/blog/2025/07/01/notesofalgorithm_and_data/"><![CDATA[<p>这是我关于算法与数据结构的学习笔记。</p> <h3 id="课程笔记目录">课程笔记目录</h3> <ul> <li><strong>第一章：</strong></li> </ul>]]></content><author><name></name></author><category term="my-notes"/><category term="notes"/><summary type="html"><![CDATA[这是关于算法与数据结构的学习笔记.]]></summary></entry><entry><title type="html">wordhub-单词学习软件</title><link href="https://stibiums.github.io/blog/2025/06/30/Wordhub/" rel="alternate" type="text/html" title="wordhub-单词学习软件"/><published>2025-06-30T16:40:00+00:00</published><updated>2025-06-30T16:40:00+00:00</updated><id>https://stibiums.github.io/blog/2025/06/30/Wordhub</id><content type="html" xml:base="https://stibiums.github.io/blog/2025/06/30/Wordhub/"><![CDATA[<p><strong>北京大学2025程序设计实习第120组大作业</strong></p> <h3 id="小组成员">小组成员</h3> <table> <thead> <tr> <th style="text-align: left">成员</th> <th style="text-align: left">GitHub</th> <th style="text-align: left">主要负责模块</th> <th style="text-align: left">具体分工</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><strong>刘继轩</strong></td> <td style="text-align: left"><a href="https://github.com/stibiums">stibiums</a></td> <td style="text-align: left"><strong>后端核心和杂项</strong></td> <td style="text-align: left">负责整体项目架构设计；数据库模块（SQLite）、数据导入处理、用户系统、学习记录、网络词典调用、成就系统的实现、用户类核心逻辑的编写。用嵌入式python解决游戏模块调用问题。打包发布应用程序完成应用文档。解决杂项问题。</td> </tr> <tr> <td style="text-align: left"><strong>郑星浩</strong></td> <td style="text-align: left"><a href="https://github.com/Staaaaaaaaar">Staaaaaaaaar</a></td> <td style="text-align: left"><strong>前端界面</strong></td> <td style="text-align: left">负责全部 UI 界面的设计与实现，包括主窗口、学习、查询、用户中心、数据可视化图表、游戏等界面的开发与美化。 主要提交记录见<a href="https://github.com/Staaaaaaaaar/WordHub">fork仓库</a></td> </tr> <tr> <td style="text-align: left"><strong>郑嘉祺</strong></td> <td style="text-align: left"><a href="https://github.com/missswiftie">missswiftie</a></td> <td style="text-align: left"><strong>游戏模块以及其他</strong></td> <td style="text-align: left">负责字典源文件解析；负责 Wordle 和“看描述猜单词”两个游戏的核心逻辑实现，包括 Python 端的 AI 接口调用和 C++ 端的整合；负责用户注册登录界面以及用户界面（包括用户信息、用户登录热力图等）。</td> </tr> </tbody> </table> <hr/> <h2 align="center"> <a href="https://stibiums.github.io/WordHub/">🚀 点击这里，访问我们的项目主页 🚀</a> </h2> <p align="center"> 为了获得最佳的浏览体验，包括<strong>带声音的视频演示</strong>和完整的项目介绍，我们强烈建议您访问我们的项目主页。 </p> <p align="center"> 如果必须要单独提交pdf报告和展示视频，请点击下面的链接下载： <a href="https://github.com/stibiums/WordHub/blob/main/%E6%9D%82%E9%A1%B9/pdf%E7%89%88%E6%96%87%E6%A1%A3.pdf">pdf报告文档</a> <a href="https://disk.pku.edu.cn/link/AAE051D42E961B41C9974D7869E5DD8008">展示视频下载</a> </p> <hr/>]]></content><author><name></name></author><category term="my-projects"/><category term="projects"/><summary type="html"><![CDATA[wordhub是一款专注于单词学习的应用程序.]]></summary></entry></feed>